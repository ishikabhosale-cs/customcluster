/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ishikabhosale-cs/customcluster/pkg/apis/ishikabhosale.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CustomclusterLister helps list Customclusters.
// All objects returned here must be treated as read-only.
type CustomclusterLister interface {
	// List lists all Customclusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Customcluster, err error)
	// Customclusters returns an object that can list and get Customclusters.
	Customclusters(namespace string) CustomclusterNamespaceLister
	CustomclusterListerExpansion
}

// customclusterLister implements the CustomclusterLister interface.
type customclusterLister struct {
	indexer cache.Indexer
}

// NewCustomclusterLister returns a new CustomclusterLister.
func NewCustomclusterLister(indexer cache.Indexer) CustomclusterLister {
	return &customclusterLister{indexer: indexer}
}

// List lists all Customclusters in the indexer.
func (s *customclusterLister) List(selector labels.Selector) (ret []*v1alpha1.Customcluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Customcluster))
	})
	return ret, err
}

// Customclusters returns an object that can list and get Customclusters.
func (s *customclusterLister) Customclusters(namespace string) CustomclusterNamespaceLister {
	return customclusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomclusterNamespaceLister helps list and get Customclusters.
// All objects returned here must be treated as read-only.
type CustomclusterNamespaceLister interface {
	// List lists all Customclusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Customcluster, err error)
	// Get retrieves the Customcluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Customcluster, error)
	CustomclusterNamespaceListerExpansion
}

// customclusterNamespaceLister implements the CustomclusterNamespaceLister
// interface.
type customclusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Customclusters in the indexer for a given namespace.
func (s customclusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Customcluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Customcluster))
	})
	return ret, err
}

// Get retrieves the Customcluster from the indexer for a given namespace and name.
func (s customclusterNamespaceLister) Get(name string) (*v1alpha1.Customcluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("customcluster"), name)
	}
	return obj.(*v1alpha1.Customcluster), nil
}
